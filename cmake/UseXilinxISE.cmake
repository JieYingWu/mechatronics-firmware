# UseXilinxISE
#
# This package assumes that find_package(XilinxISE) has already been called,
# so that the XILINX_ISE programs have already been found.
#
# Macro: ise_compile_fpga
# Parameters:
#   - PROJ_NAME:       the project name (most output files will use this name)
#   - FPGA_PARTNUM:    the FPGA part number
#   - VERILOG_SOURCE:  list of Verilog source code (.v)
#   - UCF_FILE:        User constraints file
#   - IPCORE_DIR:      Directory to search for IP cores
#   - TOP_LEVEL:       Top level module name
#   - PROJ_OUTPUT:     the final output name (can be different from PROJ_NAME)
#
# Note that PROJ_OUTPUT is provided for the final naming because currently the
# PROJ_NAMES are FPGA1394QLA and FPGA1394EthQLA, while the corresponding PROJ_OUTPUT
# are FPGA1394-QLA and FPGA1394Eth-QLA.
#
# This macro could be enhanced to accept parameters that provide options for
# the various compilation steps. Presently, most options are left at their default
# values, with a few exceptions noted. These settings are consistent with the ISE
# project files, FPGA1394-QLA.xise and FPGA1394Eth-QLA.xise.

macro (ise_compile_fpga ...)

  # set all keywords and their values to ""
  set (FUNCTION_KEYWORDS
       PROJ_NAME
       FPGA_PARTNUM
       VERILOG_SOURCE
       UCF_FILE
       IPCORE_DIR
       TOP_LEVEL
       PROJ_OUTPUT)

  # reset local variables
  foreach(keyword ${FUNCTION_KEYWORDS})
    set (${keyword} "")
  endforeach(keyword)

  # parse input
  foreach (arg ${ARGV})
    list (FIND FUNCTION_KEYWORDS ${arg} ARGUMENT_IS_A_KEYWORD)
    if (${ARGUMENT_IS_A_KEYWORD} GREATER -1)
      set (CURRENT_PARAMETER ${arg})
      set (${CURRENT_PARAMETER} "")
    else (${ARGUMENT_IS_A_KEYWORD} GREATER -1)
      set (${CURRENT_PARAMETER} ${${CURRENT_PARAMETER}} ${arg})
    endif (${ARGUMENT_IS_A_KEYWORD} GREATER -1)
  endforeach (arg)

  file(TO_NATIVE_PATH ${XILINX_ISE_XST} XST_NATIVE)
  file(TO_NATIVE_PATH ${XILINX_ISE_NGDBUILD} NGDBUILD_NATIVE)
  file(TO_NATIVE_PATH ${XILINX_ISE_MAP} MAP_NATIVE)
  file(TO_NATIVE_PATH ${XILINX_ISE_PAR} PAR_NATIVE)
  file(TO_NATIVE_PATH ${XILINX_ISE_TRCE} TRCE_NATIVE)
  file(TO_NATIVE_PATH ${XILINX_ISE_BITGEN} BITGEN_NATIVE)
  file(TO_NATIVE_PATH ${XILINX_ISE_IMPACT} IMPACT_NATIVE)

  # Prepare files used by XST
  set (PRJ_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJ_NAME}.prj")
  file (WRITE ${PRJ_FILE} "")
  foreach (f ${VERILOG_SOURCE})
    file (APPEND ${PRJ_FILE} "verilog work \"${f}\"\n")
  endforeach()

  # Create XST input (script) file.
  set (XST_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJ_NAME}.xst")
  file (WRITE ${XST_FILE} "# File generated by CMake for ${PROJ_NAME}\n"
                           "run\n"
                           "-ifn ${PROJ_NAME}.prj\n"
                           "-ofn ${PROJ_NAME}.ngc\n"
                           "-p ${FPGA_PARTNUM}\n"
                           "-top ${TOP_LEVEL}\n"
                           "# Following are default values\n"
                           "-opt_mode speed\n"
                           "-opt_level 1\n")
  # file (TO_NATIVE_PATH ${XST_FILE} XST_FILE_NATIVE)

  add_custom_target(${PROJ_NAME}-generate-xst
                    DEPENDS ${VERILOG_SOURCE}
                    COMMENT "Scanning Verilog files")

  # XST Synthesis (Verilog --> NGC)
  add_custom_command (OUTPUT "${PROJ_NAME}.ngc"
                      COMMAND ${XST_NATIVE} -intstyle silent -ifn ${PROJ_NAME}.xst
                      DEPENDS "${PROJ_NAME}-generate-xst"
                      COMMENT "Running XST to synthesize design")

  add_custom_target(${PROJ_NAME}-generate-ngc
                    DEPENDS "${PROJ_NAME}.ngc"
                    COMMENT "Checking XST Synthesis")

  # Implementation Step 1 (NGC --> NGD)
  #  -dd <dir>        --> set output directory to <dir>
  #  -sd <dir>        --> search directory <dir>
  add_custom_command(OUTPUT "${PROJ_NAME}.ngd"
                     COMMAND ${NGDBUILD_NATIVE} -intstyle silent -quiet 
                             -dd ${CMAKE_CURRENT_BINARY_DIR}/_ngo
                             -sd ${IPCORE_DIR}
                             -uc ${UCF_FILE}
                             -p  ${FPGA_PARTNUM}
                             ${PROJ_NAME}.ngc
                             ${PROJ_NAME}.ngd
                     DEPENDS "${PROJ_NAME}-generate-ngc"
                     COMMENT "Running NGDBUILD")

  add_custom_target(${PROJ_NAME}-generate-ngd
                    DEPENDS "${PROJ_NAME}.ngd"
                    COMMENT "Checking NGDBUILD")

  # Map
  # Most options left at default. Following options are set; some are at default values,
  # others are uncertain.
  #   -w     --> overwrite existing files
  #   -logic_opt off
  #   -ol high    --> overall effort level (default)
  #   -xt 0
  #   -register_duplication off
  #   -r 4
  #   -mt 2       --> use multi-threading (-mt on)
  #   -ir off     --> uncertain whether this is default
  #   -lc off
  #   -power off
  add_custom_command(OUTPUT "${PROJ_NAME}_map.ncd" "${PROJ_NAME}.pcf"
                     COMMAND ${MAP_NATIVE} -intstyle silent
                             -p  ${FPGA_PARTNUM}
                             -w -logic_opt off -ol high -xt 0 -register_duplication off
                             -r 4 -mt 2 -ir off -lc off -power off
                             -o ${PROJ_NAME}_map.ncd
                             ${PROJ_NAME}.ngd
                             ${PROJ_NAME}.pcf
                     DEPENDS "${PROJ_NAME}-generate-ngd"
                     COMMENT "Running MAP")

  add_custom_target(${PROJ_NAME}-generate-map
                    DEPENDS "${PROJ_NAME}_map.ncd" "${PROJ_NAME}.pcf"
                    COMMENT "Checking MAP")

  # PAR (Place & Route)
  add_custom_command(OUTPUT "${PROJ_NAME}.ncd"
                     COMMAND ${PAR_NATIVE} -intstyle silent
                             -w -ol high -mt 4 
                             ${PROJ_NAME}_map.ncd
                             ${PROJ_NAME}.ncd
                             ${PROJ_NAME}.pcf
                     DEPENDS "${PROJ_NAME}-generate-map"
                     COMMENT "Running PAR")

  add_custom_target(${PROJ_NAME}-generate-ncd
                    DEPENDS "${PROJ_NAME}.ncd"
                    COMMENT "Checking PAR")

  # Trace
  #   -v 3         --> generate verbose report, with a limit of 3 items per timing constraint
  #   -s 3         --> device speed (should not be needed, can get it from NCD file)
  #   -n 3         --> number of endpoints to report
  #   -fastpaths   --> report fastest paths of design
  add_custom_command(OUTPUT "${PROJ_NAME}.twr"
                     COMMAND ${TRCE_NATIVE} -intstyle silent
                             -v 3 -s 3 -n 3 -fastpaths
                             -xml ${PROJ_NAME}.twx
                             ${PROJ_NAME}.ncd
                             -o ${PROJ_NAME}.twr
                             ${PROJ_NAME}.pcf
                     DEPENDS "${PROJ_NAME}-generate-ncd"
                     COMMENT "Running TRCE")

  add_custom_target(${PROJ_NAME}-timing
                    DEPENDS "${PROJ_NAME}.twr")

  # Bitgen (NCD --> BIT)
  #   Can set pullup/pulldown; currently using defaults, which are pullup for the
  #   PROG, TCK, TDI, TDO, and TMS pins and pulldown for all unused pins.
  #   Can set UserID to any 8 digit hexadecimal string (default is 0xFFFFFFFF).
  #   TIMER_CFG default for Spartan 6 is 0x0000 (value of watchdog timer in configuration mode)
  add_custom_command(OUTPUT "${PROJ_NAME}.bit"
                     COMMAND ${BITGEN_NATIVE} -intstyle silent
                             -w -g UserID:0xFFFFFFFF -g TIMER_CFG:0xFFFF 
                             ${PROJ_NAME}.ncd
                     DEPENDS "${PROJ_NAME}-generate-ncd"
                     COMMENT "Running BITGEN")

  add_custom_target(${PROJ_NAME}-generate-bit
                    DEPENDS "${PROJ_NAME}.bit")

  # Create Impact batch file
  # Probably some of the options are default values and could be removed
  set (CMD_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJ_NAME}.cmd")
  file (WRITE ${CMD_FILE} "# Impact batch file generated by CMake\n"
                           "setMode -pff\n"
                           "addConfigDevice  -name \"${PROJ_OUTPUT}\" -path \".\"\n"
                           "setSubmode -pffspi\n"
                           "setAttribute -configdevice -attr multibootBpiType -value \"\"\n"
                           "addDesign -version 0 -name \"0\"\n"
                           "addDeviceChain -index 0\n"
                           "setAttribute -configdevice -attr compressed -value \"FALSE\"\n"
                           "setAttribute -configdevice -attr autoSize -value \"FALSE\"\n"
                           "setAttribute -configdevice -attr fileFormat -value \"mcs\"\n"
                           "setAttribute -configdevice -attr fillValue -value \"FF\"\n"
                           "setAttribute -configdevice -attr swapBit -value \"FALSE\"\n"
                           "setAttribute -configdevice -attr dir -value \"UP\"\n"
                           "setAttribute -configdevice -attr multiboot -value \"FALSE\"\n"
                           "setAttribute -configdevice -attr spiSelected -value \"TRUE\"\n"
                           "addPromDevice -p 1 -size 2048\n"
                           "setAttribute -design -attr name -value \"0000\"\n"
                           "addDevice -p 1 -file \"${PROJ_NAME}.bit\"\n"
                           "generate\n"
                           "setCurrentDesign -version 0\n"
                           "exit\n")
  file (TO_NATIVE_PATH ${CMD_FILE} CMD_FILE_NATIVE)
  
  add_custom_command(OUTPUT "${PROJ_OUTPUT}.mcs"
                     COMMAND ${IMPACT_NATIVE} -batch ${CMD_FILE_NATIVE}
                     DEPENDS  "${PROJ_NAME}-generate-bit"
                     COMMENT "Running Impact to create ${PROJ_OUTPUT}.mcs")

  add_custom_target(${PROJ_NAME} ALL
                    DEPENDS "${PROJ_OUTPUT}.mcs")

  add_custom_command (TARGET ${PROJ_NAME}
                      POST_BUILD
                      COMMAND ${CMAKE_COMMAND}
                      ARGS -E copy_if_different
                              ${CMAKE_CURRENT_BINARY_DIR}/${PROJ_OUTPUT}.mcs
                              ${CMAKE_CURRENT_SOURCE_DIR}/Generated/${PROJ_OUTPUT}.mcs
                      COMMENT "Copying ${PROJ_OUTPUT}.mcs to source \"Generated\" directory (if different)")

  # Additional files to clean; ${PROJ_OUTPUT}.mcs is already handled by CMake, so here we add
  # the other generated output files.
  set(XILINX_CLEAN_FILES ${PROJ_NAME}.ngd ${PROJ_NAME}.ngd ${PROJ_NAME}.pcf
                         ${PROJ_NAME}_map.ncd ${PROJ_NAME}.ncd ${PROJ_NAME}.twr
                         ${PROJ_NAME}.bit)

  # Following does not seem to work
  set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${XILINX_CLEAN_FILES})

endmacro(ise_compile_fpga)
